// Code generated by oto; DO NOT EDIT.

package api

import (
	"context"
	"log"
	"net/http"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"github.com/pacedotdev/oto/otohttp"
)

var (
	gatewayPushEventTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "gateway_push_event_total",
		Help: "Auto-generated metric incremented on every call to Gateway.PushEvent",
	})
	gatewayPushEventSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "gateway_push_event_success_total",
		Help: "Auto-generated metric incremented on every call to Gateway.PushEvent that does not return with an error",
	})
)

type Gateway interface {
	PushEvent(context.Context, Event) (*Void, error)
}

type gatewayServer struct {
	server  *otohttp.Server
	gateway Gateway
}

func RegisterGateway(server *otohttp.Server, gateway Gateway) {
	handler := &gatewayServer{
		server:  server,
		gateway: gateway,
	}
	server.Register("Gateway", "PushEvent", handler.handlePushEvent)
}

func (s *gatewayServer) handlePushEvent(w http.ResponseWriter, r *http.Request) {
	gatewayPushEventTotal.Inc()
	var request Event
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.gateway.PushEvent(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	gatewayPushEventSuccessTotal.Inc()
}

type Event struct {
	ProjectIDs []string `json:"projectIDs"`
	Type       string   `json:"type"`
	Payload    string   `json:"payload"`
}

type Void struct {
	Error string `json:"error,omitempty"`
}
