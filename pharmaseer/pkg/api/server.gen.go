// Code generated by oto; DO NOT EDIT.

package api

import (
	"context"
	"log"
	"net/http"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"github.com/pacedotdev/oto/otohttp"
)

var (
	pharmaSeerGetDrugDetailsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "pharma_seer_get_drug_details_total",
		Help: "Auto-generated metric incremented on every call to PharmaSeer.GetDrugDetails",
	})
	pharmaSeerGetDrugDetailsSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "pharma_seer_get_drug_details_success_total",
		Help: "Auto-generated metric incremented on every call to PharmaSeer.GetDrugDetails that does not return with an error",
	})
)

type PharmaSeer interface {
	GetDrugDetails(context.Context, GetDrugDetails) (*DrugDetails, error)
}

type pharmaSeerServer struct {
	server     *otohttp.Server
	pharmaSeer PharmaSeer
}

func RegisterPharmaSeer(server *otohttp.Server, pharmaSeer PharmaSeer) {
	handler := &pharmaSeerServer{
		server:     server,
		pharmaSeer: pharmaSeer,
	}
	server.Register("PharmaSeer", "GetDrugDetails", handler.handleGetDrugDetails)
}

func (s *pharmaSeerServer) handleGetDrugDetails(w http.ResponseWriter, r *http.Request) {
	pharmaSeerGetDrugDetailsTotal.Inc()
	var request GetDrugDetails
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.pharmaSeer.GetDrugDetails(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	pharmaSeerGetDrugDetailsSuccessTotal.Inc()
}

type DrugDetails struct {
	Summary                string                  `json:"summary"`
	BrandNames             []string                `json:"brandNames"`
	GenericName            string                  `json:"genericName"`
	Type                   string                  `json:"type"`
	Groups                 []string                `json:"groups"`
	AverageWeight          float64                 `json:"averageWeight"`
	MonoisotopicWeight     float64                 `json:"monoisotopicWeight"`
	ChemicalFormula        string                  `json:"chemicalFormula"`
	Structure              *DrugStructure          `json:"structure"`
	Synonyms               []string                `json:"synonyms"`
	Pharmacology           *DrugPharmacology       `json:"pharmacology"`
	ExperimentalProperties *ExperimentalProperties `json:"experimentalProperties"`
	Error                  string                  `json:"error,omitempty"`
}

type DrugPharmacology struct {
	RouteOfElimination string `json:"routeOfElimination"`
	HalfLife           string `json:"halfLife"`
	MechanismOfAction  string `json:"mechanismOfAction"`
}

type DrugStructure struct {
	ImageURL string `json:"imageURL"`
}

type ExperimentalMetric struct {
	Value  float64 `json:"value"`
	Source string  `json:"source"`
}

type ExperimentalProperties struct {
	MeltingPoint    ExperimentalMetric `json:"meltingPoint"`
	WaterSolubility ExperimentalMetric `json:"waterSolubility"`
	LogP            ExperimentalMetric `json:"logP"`
	Caco2Perm       ExperimentalMetric `json:"caco2Perm"`
	PKa             ExperimentalMetric `json:"pKa"`
}

type GetDrugDetails struct {
	Input string `json:"input"`
	Force bool   `json:"force"`
}
